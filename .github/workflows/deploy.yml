name: CI/CD Backend

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'infra/backend.Dockerfile'
      - 'infra/docker-compose.prod.yml'
      - '.github/workflows/deploy.yml'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare image variables
        id: prep
        run: |
          if [ -z "${{ secrets.BACKEND_IMAGE }}" ]; then
            echo "BACKEND_IMAGE secret is empty" >&2; exit 1;
          fi
          IMAGE="${{ secrets.BACKEND_IMAGE }}"
          # Detect registry: if first path segment contains a dot, assume it's a registry domain; else docker.io
          FIRST_SEG=$(echo "$IMAGE" | cut -d'/' -f1)
          if echo "$FIRST_SEG" | grep -q '\.'; then
            REGISTRY="$FIRST_SEG"
          else
            REGISTRY="docker.io"
          fi
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          echo "registry=$REGISTRY" >> $GITHUB_OUTPUT
          echo "Detected registry: $REGISTRY"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.prep.outputs.registry }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infra/backend.Dockerfile
          push: true
          tags: |
            ${{ steps.prep.outputs.image }}:latest
            ${{ steps.prep.outputs.image }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ steps.prep.outputs.image }}:buildcache
          cache-to: type=registry,ref=${{ steps.prep.outputs.image }}:buildcache,mode=max

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            set -e
            export DEPLOY_PATH=${{ secrets.DEPLOY_PATH }}
            if [ ! -d "$DEPLOY_PATH" ]; then
              git clone ${{ github.server_url }}/${{ github.repository }} "$DEPLOY_PATH"
            fi
            cd "$DEPLOY_PATH"
            git fetch --all
            git reset --hard ${{ github.sha }}
            docker compose -f infra/docker-compose.prod.yml pull backend
            docker compose -f infra/docker-compose.prod.yml up -d --remove-orphans
